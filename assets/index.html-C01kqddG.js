import{_ as l,c as t,e as i,f as n,r as h,o as e}from"./app-CjvGNzT6.js";const p={};function k(d,s){const a=h("Mermaid");return e(),t("div",null,[s[0]||(s[0]=i('<p>In programming, we often talk about <strong>data structures</strong>, like arrays, lists, stacks, queues and so on.<br> But underneath them lies a deeper, more theoretical concept that defines <em>how</em> we use and reason about these structures: the <strong>Abstract Data Type</strong>, or <strong>ADT</strong>.</p><h2 id="_1-what-is-an-abstract-data-type-adt" tabindex="-1"><a class="header-anchor" href="#_1-what-is-an-abstract-data-type-adt"><span>1. What is an <strong>Abstract Data Type (ADT)</strong>?</span></a></h2><p>An <strong>Abstract Data Type (ADT)</strong> is a <strong>mathematical model</strong> that defines:</p><ul><li><strong>What</strong> operations can be performed on a data structure.</li><li><strong>What</strong> behavior those operations guarantee, but <strong>not</strong> how they are implemented.</li></ul><p>Think of it as a <strong>contract</strong> or a <strong>blueprint</strong>.</p><div class="hint-container info"><p class="hint-container-title">ADT</p><p>Logical description of data + allowed operations.</p></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The <em>“abstract”</em> part means we don’t care about how it’s implemented internally — only about what it can do.</p></div><h2 id="_2-everyday-analogy" tabindex="-1"><a class="header-anchor" href="#_2-everyday-analogy"><span>2. Everyday Analogy</span></a></h2><p>Consider a <strong>vending machine</strong>.</p><ul><li>You can insert coins.</li><li>You can select a product.</li><li>You can get your product.</li></ul><p>You don&#39;t need to know:</p><ul><li>What sensors are used,</li><li>How the internal mechanism works,</li><li>How it keeps track of inventory,</li><li>How the machine counts your money,</li><li>How it releases the drink.</li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p>You just trust the <strong>interface</strong>. The <strong>what</strong>, not the <strong>how</strong>.</p></div><p>That’s exactly what an ADT is in computer science.</p><h2 id="_3-formal-definition" tabindex="-1"><a class="header-anchor" href="#_3-formal-definition"><span>3. Formal Definition</span></a></h2><p>An Abstract Data Type is defined by:</p><ol><li>A <strong>set of values</strong> (the data it can store), and</li><li>A <strong>set of operations</strong> that can be performed on those values,<br> along with rules that describe how those operations behave.</li></ol><div class="hint-container info"><p class="hint-container-title">Example</p><p>A <strong>Stack ADT</strong> is defined by:</p><ul><li><strong>Values:</strong> an ordered collection of elements.</li><li><strong>Operations:</strong><ul><li><code>push(x)</code> — adds element <code>x</code> to the top,</li><li><code>pop()</code> — removes the top element,</li><li><code>top()</code> — looks at the top without removing,</li><li><code>is_empty()</code> — checks if the stack is empty.</li></ul></li></ul></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Nowhere do we say <em>how</em> the stack is implemented. It could be:</p><ul><li>An array,</li><li>A linked list,</li><li>A dynamic container.</li></ul></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The behavior stays the same. That’s the essence of abstraction.</p></div><h2 id="_4-adt-vs-data-structure" tabindex="-1"><a class="header-anchor" href="#_4-adt-vs-data-structure"><span>4. ADT vs Data Structure</span></a></h2><p>This is a <strong>classic confusion</strong> — and an important one to clear up:</p><table><thead><tr><th>Concept</th><th>Focus</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td><strong>Abstract Data Type (ADT)</strong></td><td><em>What it does</em></td><td>Stack, Queue, Map</td><td>Defines operations and expected behavior.</td></tr><tr><td><strong>Data Structure</strong></td><td><em>How it works</em></td><td>Array, Linked List, Hash Table</td><td>Concrete way to store and organize data.</td></tr></tbody></table><p>In other words:</p><ul><li><strong>ADT = concept / behavior</strong></li><li><strong>Data structure = implementation</strong></li></ul><p>You can implement the same ADT using different data structures.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><p>The <strong>Stack ADT</strong> can be implemented with:</p><ul><li>An <strong>array</strong> (fixed or dynamic size), or</li><li>A <strong>linked list</strong> (nodes pointing to the next element).</li></ul></div><p>Both support <code>push</code> and <code>pop</code> operations, but performance characteristics differ.</p><h2 id="_5-adts-in-modern-programming" tabindex="-1"><a class="header-anchor" href="#_5-adts-in-modern-programming"><span>5. ADTs in Modern Programming</span></a></h2><p>In modern languages, ADTs are often represented as <strong>interfaces</strong>, <strong>abstract classes</strong>, or <strong>concepts</strong>.</p>',30)),n(a,{code:"eJxLzkksLnbJTEwvSszlUgCClMyi1OSSzPw8BZ8gsABYhYJncElicnZdSJ1CNVhUQUG7oLQ4QyNE00qhLD8zBS6YX6ABFAqB8TOL41NzC0oqQYJJ+fk5YPFaLgBJwCEv"}),s[1]||(s[1]=i(`<p>For example, in C++:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#pragma</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> once</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;optional&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// Data Structures namespace</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">namespace</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> ds</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">template</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">typename</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> T</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">struct</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> IStack</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    virtual</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> ~IStack</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">default</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    /**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@brief</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> Pushes a value onto the stack.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     */</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    virtual</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> T</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    /**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@brief</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> Pops the top value off the stack and returns it.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@throws</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> std::runtime_error if the stack is empty.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     */</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    virtual</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    /**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@brief</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> Pops the top value off the stack and returns it.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@throws</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> std::runtime_error if the stack is empty.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     */</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    [[</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">nodiscard</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">virtual</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> T </span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    /**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@brief</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> Checks if the stack is empty.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@return</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> true if the stack is empty, false otherwise.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     */</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    [[</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">nodiscard</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">virtual</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> bool</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> noexcept</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    /**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@brief</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> Constructs and pushes a value onto the stack.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     */</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    template</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">typename</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">... </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">Args</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> emplace</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">Args</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;&amp;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">... </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">args</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">        requires</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::constructible_from&lt;T, Args...&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">        push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">T</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">forward</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">Args</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;(args)...));</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    /**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@brief</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> Tries to pop the top value off the stack.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">@return</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> std::optional containing the popped value, or std::nullopt if the</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     * stack is empty.</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">     */</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    [[</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">nodiscard</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">optional</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; </span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">try_pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">()</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">())</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">            return</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::nullopt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // namespace ds</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This defines a <strong>Stack ADT</strong>. Any class implementing this interface provides a concrete data structure that fulfills the same behavioral contract. <code>C++</code> interface is extended by additional operations like <code>emplace</code> and <code>try_pop</code> to enhance usability and performance.</p><h2 id="_6-example-stack-adt-implementations" tabindex="-1"><a class="header-anchor" href="#_6-example-stack-adt-implementations"><span>6. Example: Stack ADT Implementations</span></a></h2>`,4)),n(a,{code:"eJy1kc0OgjAMgO88RY/+BB+AeDHxQkI8KDdjTN0WWQS2sEIgKs8uTEBIPOpu/bp97VoWozFbidcMEweaw2UmGEmVQrC3wN4A/0DIbnVYw91SgKXOTTQL5x4USvIBKj1rUNjH0pxFoqlq4UWp2PKnMzJb8SbLsBrbXY6EjefIUCOTVJ36BCntp1yUHsiU/tFLIA1NWokEcg92iosG/7hiZ/1MtcA4FyNFKkqaFu/evzcC68dqNZrh91T7JZsZIli4rrU6L++5jOg="}),s[2]||(s[2]=i(`<h3 id="array-based-stack-fixed-capacity" tabindex="-1"><a class="header-anchor" href="#array-based-stack-fixed-capacity"><span>Array-Based Stack (fixed capacity)</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#pragma</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> once</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &quot;IStack.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;array&gt;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;cstddef&gt;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;stdexcept&gt;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;utility&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">namespace</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> ds</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">template</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">typename</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> T</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">size_t</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> Capacity</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> StackArray</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> final</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> : </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> IStack</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    static_assert</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(Capacity &gt; </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;StackArray capacity must be greater than zero&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> T</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">override</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">        push_impl</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(v);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">override</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">        push_impl</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(v));</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    [[</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">nodiscard</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">virtual</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> T </span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">override</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">        ensure_not_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        --top_index_;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">data_</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">[top_index_]);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    [[</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">nodiscard</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">virtual</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> bool</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> noexcept</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> override</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> top_index_ == </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">private:</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    template</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> U</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> push_impl</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">U</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">        ensure_space</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">        data_</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">[top_index_] = </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">forward</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">U</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;(v);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        ++top_index_;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> ensure_space</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">()</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (top_index_ &gt;= Capacity)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">            throw</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">runtime_error</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;StackArray::push: capacity exceeded&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> ensure_not_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">()</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">())</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">            throw</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">runtime_error</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;StackArray::pop: stack is empty&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">    std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::array&lt;T, Capacity&gt; data_{};</span></span>
<span class="line"><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">    std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">size_t</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> top_index_{</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">};</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // namespace ds</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Usage Example</summary><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &quot;ds/StackArray.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;gtest/gtest.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">using</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> ds</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::StackArray;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackArray, PushPopBasic)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // Arrange</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackArray&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_FALSE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackArray, EmplaceAndTryPop)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackArray&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::string, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">emplace</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;x&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // &quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    auto</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> v = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">try_pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    ASSERT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">has_value</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(*v, </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;xxx&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_FALSE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">try_pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">().</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">has_value</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackArray, OverflowThrows)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackArray&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">10</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">20</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_THROW</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">30</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">), </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::runtime_error);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackArray, UnderflowThrows)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackArray&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_THROW</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">((</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::runtime_error);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackArray, PushByReference)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackArray&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::string, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">    std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::string str = </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;hello&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(str);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    str = </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;world&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(str));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;world&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;hello&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// Covers capacity=1 successful push/pop path (previously only underflow was tested)</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackArray, CapacityOneHappyPath)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackArray&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> x = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">42</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(x);</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // cover const&amp; overload for int, Capacity=1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_FALSE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">42</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // cover pop success for Capacity=1 instantiation</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// Ensure const&amp; overload is exercised for int with capacity &gt; 1</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackArray, IntLvaluePush)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackArray&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">4</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> a = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> b = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(a);</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // const&amp; overload</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(b);</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // const&amp; overload</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">9</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">7</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// Exercise IStack&lt;int&gt;::try_pop both branches (value and nullopt)</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackArray, TryPopIntBothPaths)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackArray&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_FALSE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">try_pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">().</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">has_value</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // empty branch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">emplace</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">123</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">        // uses push(T&amp;&amp;)</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    auto</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> v = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">try_pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // value branch</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    ASSERT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">has_value</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(*v, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">123</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_FALSE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">try_pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">().</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">has_value</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // empty again</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="linked-list-stack" tabindex="-1"><a class="header-anchor" href="#linked-list-stack"><span>Linked-List Stack</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#pragma</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> once</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &quot;ds/IStack.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;memory&gt;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;stdexcept&gt;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;utility&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">namespace</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> ds</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">template</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">typename</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> T</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> StackList</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> : </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">public</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> ds</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">IStack</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> T</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">override</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">        push_impl</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(v);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">override</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">        push_impl</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(v));</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    [[</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">nodiscard</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">T</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">override</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">())</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">            throw</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">runtime_error</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;StackList::pop: stack is empty&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">        auto</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> temp = </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(head_);</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // keep strong exception safety</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        head_ = </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">temp</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">next</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">temp</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">-&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">data</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    [[</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">nodiscard</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">bool</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> noexcept</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> override</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">        return</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> head_ == </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">nullptr</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">private:</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    struct</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> Node</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">        template</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> U</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">        Node</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">U</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> d</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">unique_ptr</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">n</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) : </span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">data</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">forward</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">U</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;(d)), </span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">next</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(n))</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        T data;</span></span>
<span class="line"><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">        std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::unique_ptr&lt;Node&gt; next;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    template</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">class</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> U</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    void</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> push_impl</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">U</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">&amp;&amp;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    {</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        head_ = </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">make_unique</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">Node</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">forward</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">U</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt;(v), </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(head_));</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">    std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::unique_ptr&lt;Node&gt; head_;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // namespace ds</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>Both behave as “stacks” (LIFO),<br> but the data structure differs — and so do memory and speed trade-offs.</p></div><details class="hint-container details"><summary>Usage Example</summary><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &quot;ds/StackList.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">#include</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> &lt;gtest/gtest.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">using</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;"> ds</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::StackList;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackList, PushPopBasic)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // Arrange</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackList&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_FALSE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">is_empty</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackList, EmplaceAndTryPop)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackList&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::string&gt; s;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">emplace</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;x&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // &quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    auto</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> v = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">try_pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    ASSERT_TRUE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">v</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">has_value</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(*v, </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;xxx&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_FALSE</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">try_pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">().</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">has_value</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackList, UnderflowThrows)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackList&lt;</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">int</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&gt; s;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_THROW</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">((</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">void</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::runtime_error);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">TEST</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(StackList, PushByReference)</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    StackList&lt;</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::string&gt; s;</span></span>
<span class="line"><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">    std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::string str = </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;hello&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(str);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    str = </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;world&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">push</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#267F99;--shiki-dark:#4EC9B0;">std</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">::</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">move</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(str));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;world&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    EXPECT_EQ</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">s</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">pop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(), </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;hello&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_7-why-adts-matter" tabindex="-1"><a class="header-anchor" href="#_7-why-adts-matter"><span>7. Why ADTs Matter</span></a></h2><div class="hint-container info"><p class="hint-container-title">Info</p><p><strong>Abstract Data Types</strong> are the <strong>bridge</strong> between algorithms and data structures.</p></div><p>They let us:</p><ul><li>Design algorithms independently of the underlying data representation.</li><li>Write clean interfaces that can evolve without breaking the rest of the code.</li><li>Reason about correctness and complexity mathematically.</li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p>In other words, they separate <strong>conceptual behavior</strong> from <strong>implementation detail</strong>.</p></div><h3 id="using-an-adt-via-its-interface" tabindex="-1"><a class="header-anchor" href="#using-an-adt-via-its-interface"><span>Using an ADT via its Interface</span></a></h3>`,13)),n(a,{code:"eJxlzLEOwiAQxvG9T8FYB2PSdDKGhKgDM09wIajEluJxDH17KQRtAuOf333BfKJx2twsPBHmjqUHmhZk18kaRzl4QLLaenDEJIPApCLQ74t1xBugxCYyEIiwFpVZmTxyLs/Mx/Dqx+GQP2RqSuxiyxffV1vxLymxtaTG4U/KdW7Nmg332dO6X6ycMJrTA6Zgui/HP0/Z"}),s[3]||(s[3]=i('<h2 id="_8-common-adts-you-ll-encounter" tabindex="-1"><a class="header-anchor" href="#_8-common-adts-you-ll-encounter"><span>8. Common ADTs You’ll Encounter</span></a></h2><p>Here’s a list of the most fundamental <strong>ADTs</strong> that nearly every program uses:</p><table><thead><tr><th>ADT</th><th>Description</th><th>Common Implementations</th></tr></thead><tbody><tr><td><strong>Stack</strong></td><td>LIFO (Last In, First Out) collection</td><td>Array, Linked List</td></tr><tr><td><strong>Queue</strong></td><td>FIFO (First In, First Out) collection</td><td>Circular Buffer, Linked List</td></tr><tr><td><strong>Deque</strong></td><td>Double-ended queue</td><td>Dynamic Array, Doubly Linked List</td></tr><tr><td><strong>List / Sequence</strong></td><td>Ordered collection</td><td>Array, Linked List</td></tr><tr><td><strong>Set</strong></td><td>Unique elements, no duplicates</td><td>Hash Table, Balanced Tree</td></tr><tr><td><strong>Map / Dictionary</strong></td><td>Key–value pairs</td><td>Hash Map, Balanced Tree</td></tr><tr><td><strong>Priority Queue</strong></td><td>Elements with priority order</td><td>Heap</td></tr><tr><td><strong>Graph</strong></td><td>Nodes + edges connecting them</td><td>Adjacency List, Matrix</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">Info</p><p>Each of these defines behavior <strong>abstractly</strong> — you can implement them differently for different trade-offs.</p></div><h2 id="_9-abstraction-encapsulation-and-reuse" tabindex="-1"><a class="header-anchor" href="#_9-abstraction-encapsulation-and-reuse"><span>9. Abstraction, Encapsulation, and Reuse</span></a></h2><p>ADTs promote:</p><ul><li><strong>Abstraction</strong> — hiding the details of how operations are performed.</li><li><strong>Encapsulation</strong> — protecting internal state.</li><li><strong>Reusability</strong> — algorithms can work with any structure that satisfies the same interface.</li></ul><p>That’s why most programming libraries — from the C++ STL to Python collections — are built around ADTs at their core.</p><h2 id="_10-key-takeaways" tabindex="-1"><a class="header-anchor" href="#_10-key-takeaways"><span>10. Key Takeaways</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Tips</p><ul><li>An <strong>Abstract Data Type (ADT)</strong> defines what operations can be done and how they should behave, but <strong>not how they are implemented</strong>.</li><li>A <strong>Data Structure</strong> is a specific way of implementing that <strong>ADT</strong>.</li><li><strong>ADTs</strong> make it possible to separate design from implementation.</li><li>Understanding <strong>ADTs</strong> helps you reason about algorithms, performance, and correctness at a deeper level.</li></ul></div>',10))])}const D=l(p,[["render",k]]),g=JSON.parse('{"path":"/courses/back-to-basics/core-data-structures/abstract-data-types/","title":"Abstract Data Types (ADT) Explained","lang":"en-US","frontmatter":{"title":"Abstract Data Types (ADT) Explained","icon":"database","order":1,"index":true,"date":"2025-10-18T00:00:00.000Z","category":["Core Data Structures","Back to Basics"],"tag":["ADT","Data Structures","Abstraction","Programming Fundamentals"],"permalink":"/courses/back-to-basics/core-data-structures/abstract-data-types/","description":"In programming, we often talk about data structures, like arrays, lists, stacks, queues and so on. But underneath them lies a deeper, more theoretical concept that defines how w...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Abstract Data Types (ADT) Explained\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-22T06:55:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Damian Drzewicz\\"}]}"],["meta",{"property":"og:url","content":"https://moderndev.eu/courses/back-to-basics/core-data-structures/abstract-data-types/"}],["meta",{"property":"og:site_name","content":"<ModernDev/>"}],["meta",{"property":"og:title","content":"Abstract Data Types (ADT) Explained"}],["meta",{"property":"og:description","content":"In programming, we often talk about data structures, like arrays, lists, stacks, queues and so on. But underneath them lies a deeper, more theoretical concept that defines how w..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-10-22T06:55:27.000Z"}],["meta",{"property":"article:tag","content":"Programming Fundamentals"}],["meta",{"property":"article:tag","content":"Abstraction"}],["meta",{"property":"article:tag","content":"Data Structures"}],["meta",{"property":"article:tag","content":"ADT"}],["meta",{"property":"article:published_time","content":"2025-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-22T06:55:27.000Z"}]]},"git":{"createdTime":1760777082000,"updatedTime":1761116127000,"contributors":[{"name":"Damian Drzewicz","username":"","email":"damian.drzewicz@gmail.com","commits":2}]},"readingTime":{"minutes":3.26,"words":977},"filePathRelative":"courses/001-back-to-basics/003-core-data-structures/001-abstract-data-types.md","excerpt":"<p>In programming, we often talk about <strong>data structures</strong>, like arrays, lists, stacks, queues and so on.<br>\\nBut underneath them lies a deeper, more theoretical concept that defines <em>how</em> we use and reason about these structures: the <strong>Abstract Data Type</strong>, or <strong>ADT</strong>.</p>","autoDesc":true}');export{D as comp,g as data};
