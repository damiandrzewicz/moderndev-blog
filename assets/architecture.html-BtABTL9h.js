import{_ as s,c as i,f as a,o as l}from"./app-BrsVgJ0E.js";const n={};function t(d,e){return l(),i("div",null,[...e[0]||(e[0]=[a(`<h1 id="learn-cpp-architecture-tooling-and-workflow-guide" tabindex="-1"><a class="header-anchor" href="#learn-cpp-architecture-tooling-and-workflow-guide"><span>learn-cpp: Architecture, Tooling, and Workflow Guide</span></a></h1><p>This document is an in-depth, hands-on guide to the project structure, build and test workflow, and the tooling that makes day-to-day C++ development smooth and reproducible. It covers:</p><ul><li>Repository layout and what each file/folder is for</li><li>CMake configuration (including presets) and reusable helpers</li><li>Conan package management and toolchains</li><li>Testing and coverage (CTest, GoogleTest, gcovr)</li><li>Development environment (Dev Container, VS Code setup)</li><li>Practical command examples for local use and CI readiness</li></ul><blockquote><p>You can skip transient build artifacts. We focus on source-controlled files that define behavior.</p></blockquote><hr><h2 id="_1-repository-layout" tabindex="-1"><a class="header-anchor" href="#_1-repository-layout"><span>1) Repository layout</span></a></h2><p>At the root:</p><ul><li><code>CMakeLists.txt</code>: Root CMake entrypoint. Declares options (testing, sanitizers, coverage), sets up include paths, and imports helper functions.</li><li><code>CMakePresets.json</code>: Project-owned build presets (Debug, Release, Coverage). Define consistent configure/build/test behavior for local and CI.</li><li><code>CMakeUserPresets.json</code>: Conan-generated presets (toolchains, cache paths). These are machine-specific and may be regenerated.</li><li><code>cmake/</code>: Custom CMake modules. <ul><li><code>CppHelpers.cmake</code>: Reusable functions/macros to create libraries, apps, tests, and apply flags (C++ standard, sanitizers, coverage).</li></ul></li><li><code>apps/</code>: Source code organized by modules with optional app and tests. <ul><li><code>001_moderndev_sources/001_adt/</code>: Example module with headers in <code>include/</code>, a sample app in <code>src/</code>, and tests in <code>tests/</code>.</li></ul></li><li><code>scripts/</code>: Developer scripts. <ul><li><code>new-module.sh</code>: Scaffolds a new module directory structure with boilerplate CMake, sources, and tests.</li><li><code>coverage-report.sh</code>: Aggregates and renders coverage HTML using <code>gcovr</code> (or <code>lcov</code> fallback).</li></ul></li><li><code>.devcontainer/</code>: Dev environment for VS Code Remote Containers. <ul><li><code>Dockerfile</code>, <code>devcontainer.json</code>, <code>scripts/</code>.</li></ul></li><li><code>.vscode/</code>: Editor settings and tasks. <ul><li><code>settings.json</code>, <code>tasks.json</code>, <code>launch.json</code>, <code>extensions.json</code>.</li></ul></li><li><code>conanfile.txt</code>: Declares dependencies (e.g., GoogleTest) for Conan.</li><li><code>docs/</code>: Documentation (this file and others).</li><li><code>templates/</code>: Scaffolding templates used by scripts.</li><li><code>build/</code>: Out-of-source build directory containing configure/build artifacts.</li><li><code>compile_commands.json</code>: Symlink or file exposing the compilation database for language servers (clangd).</li></ul><p>Module example: <code>apps/001_moderndev_sources/001_adt/</code></p><ul><li><code>include/ds/</code>: Public headers (<code>IStack.hpp</code>, <code>StackArray.hpp</code>).</li><li><code>src/</code>: App sources (e.g., <code>main.cpp</code>) when <code>APP</code> is enabled.</li><li><code>tests/</code>: Unit tests (e.g., <code>tests/ds/StackArrayTest.cpp</code>).</li><li><code>CMakeLists.txt</code>: Uses helpers to create an INTERFACE lib + optional app and tests.</li></ul><hr><h2 id="_2-cmake-configuration-root-helpers" tabindex="-1"><a class="header-anchor" href="#_2-cmake-configuration-root-helpers"><span>2) CMake configuration (root + helpers)</span></a></h2><h3 id="root-cmakelists-txt" tabindex="-1"><a class="header-anchor" href="#root-cmakelists-txt"><span>Root CMakeLists.txt</span></a></h3><p>Key responsibilities:</p><ul><li>Enable compilation database: <ul><li><code>set(CMAKE_EXPORT_COMPILE_COMMANDS ON)</code> → generates <code>compile_commands.json</code> in build dir.</li></ul></li><li>Testing toggle: <ul><li><code>option(BUILD_TESTING &quot;Build tests&quot; ON)</code></li><li><code>enable_testing()</code></li></ul></li><li>Sanitizers and coverage toggles (for GCC/Clang): <ul><li><code>ENABLE_ASAN</code>, <code>ENABLE_UBSAN</code>, <code>ENABLE_TSAN</code>, <code>ENABLE_MSAN</code>, <code>ENABLE_COVERAGE</code> (all OFF by default).</li></ul></li><li>Include helpers: <ul><li><code>list(APPEND CMAKE_MODULE_PATH &quot;\${CMAKE_SOURCE_DIR}/cmake&quot;)</code></li><li><code>include(CppHelpers)</code></li></ul></li></ul><p>The helpers apply per-target compile options (e.g., <code>cxx_std_23</code>), sanitizer flags, and coverage flags so we avoid global <code>CMAKE_CXX_STANDARD</code> conflicts with Conan.</p><h3 id="cmake-cpphelpers-cmake" tabindex="-1"><a class="header-anchor" href="#cmake-cpphelpers-cmake"><span>cmake/CppHelpers.cmake</span></a></h3><p>Provides high-level convenience functions:</p><ul><li><code>cpp_get_module_name(out_var)</code>: Derives a module name from the folder path.</li><li><code>cpp_add_library(NAME|AUTO ...)</code>: Adds a library target with modern CMake usage requirements.</li><li><code>cpp_add_app(NAME|AUTO SOURCES ...)</code>: Adds an executable with proper compile features/flags.</li><li><code>cpp_add_gtests(NAME|AUTO SOURCES ...)</code>: Adds a GoogleTest executable and registers tests with CTest.</li><li><code>cpp_add_module(...)</code>: One-call setup for a module: <ul><li>Creates a library (INTERFACE by default; can be STATIC/SHARED with <code>LIB_SOURCES</code>).</li><li>Optionally creates an app (if <code>APP</code> and sources present), and tests (if <code>TESTS</code>).</li><li>Wires include paths and target linkages.</li></ul></li></ul><p>The helpers also:</p><ul><li>Apply <code>cxx_std_23</code> per target instead of a global standard.</li><li>Respect sanitizer and coverage options for GCC/Clang by injecting the right compile/link flags.</li><li>Register <code>gtest_discover_tests()</code> with CTest, assuming <code>BUILD_TESTING</code> is ON.</li></ul><h3 id="module-cmakelists" tabindex="-1"><a class="header-anchor" href="#module-cmakelists"><span>Module CMakeLists</span></a></h3><p>Example (<code>apps/001_moderndev_sources/001_adt/CMakeLists.txt</code>):</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-cmake"><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">cpp_add_module(</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">  NAME</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> AUTO</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  LIB_TYPE INTERFACE</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  PUBLIC_INCLUDE </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;\${CMAKE_CURRENT_SOURCE_DIR}/include&quot;</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  APP            </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"># creates an app if src/main.cpp exists or if APP_SOURCES provided</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  TESTS</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  TEST_SOURCES tests/ds/StackArrayTest.cpp</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>NAME AUTO</code>: Derives the base name from the directory.</li><li><code>LIB_TYPE INTERFACE</code>: Header-only library.</li><li><code>PUBLIC_INCLUDE</code>: Exposes headers for consumers.</li><li><code>APP</code>: Will create an app if <code>src/main.cpp</code> exists (or supply <code>APP_SOURCES</code>).</li><li><code>TESTS</code> &amp; <code>TEST_SOURCES</code>: Creates test binary and registers with CTest.</li></ul><hr><h2 id="_3-cmake-presets" tabindex="-1"><a class="header-anchor" href="#_3-cmake-presets"><span>3) CMake presets</span></a></h2><p>Presets encapsulate configure/build/test options in JSON. They’re consistent across machines and easy to invoke.</p><p>Common usage:</p><ul><li>Configure: <ul><li><code>cmake --preset Debug</code></li><li><code>cmake --preset Coverage</code></li></ul></li><li>Build: <ul><li><code>cmake --build --preset Debug -j</code></li></ul></li><li>Test: <ul><li><code>ctest --preset Debug --output-on-failure</code></li></ul></li></ul><p>Typical project-owned presets (CMakePresets.json):</p><ul><li><code>Debug</code>: Developer-focused build (no coverage); uses Conan toolchain for dependencies.</li><li><code>Release</code>: Optimized build.</li><li><code>Coverage</code>: Debug-like build with <code>-fprofile-arcs -ftest-coverage</code> (via <code>ENABLE_COVERAGE=ON</code>) and a dedicated build dir <code>build/Coverage</code>.</li></ul><p>Why presets:</p><ul><li>No need to remember long cmake command lines.</li><li>VS Code CMake Tools can read and present them in the UI.</li><li>Great for CI and onboarding.</li></ul><hr><h2 id="_4-conan-dependencies-toolchain" tabindex="-1"><a class="header-anchor" href="#_4-conan-dependencies-toolchain"><span>4) Conan (dependencies &amp; toolchain)</span></a></h2><ul><li><code>conanfile.txt</code> declares dependencies, e.g.:</li></ul><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-ini"><span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">[requires]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">gtest/1.14.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">[generators]</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">CMakeDeps</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">CMakeToolchain</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Install dependencies per build type (and C++ standard) so Conan generates a matching toolchain:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">conan</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> .</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -s</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> build_type=Debug</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -s</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> compiler.cppstd=</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">23</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --build=missing</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">conan</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> .</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -s</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> build_type=Release</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -s</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> compiler.cppstd=</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">23</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --build=missing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This produces <code>build/&lt;type&gt;/generators/conan_toolchain.cmake</code> and dependency files for CMake.</p><ul><li>CMake configure then consumes the toolchain:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">cmake</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Debug</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    # Preset points to the Debug conan toolchain</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">cmake</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --build</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Debug</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -j</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Benefits: <ul><li>Consistent compilers/flags/paths.</li><li>Easy dependency upgrades.</li><li>Reproducible environments across machines.</li></ul></li></ul><hr><h2 id="_5-testing-ctest-googletest" tabindex="-1"><a class="header-anchor" href="#_5-testing-ctest-googletest"><span>5) Testing (CTest + GoogleTest)</span></a></h2><ul><li>CTest is enabled via <code>BUILD_TESTING</code> and <code>enable_testing()</code> in the root CMake.</li><li>GoogleTest comes from Conan and is linked to test targets in <code>cpp_add_gtests</code>.</li><li>Tests are discovered using <code>gtest_discover_tests()</code> so you don’t have to manually enumerate cases.</li></ul><p>Run tests:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">ctest</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Debug</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --output-on-failure</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Example tests in <code>apps/001_moderndev_sources/001_adt/tests/ds/StackArrayTest.cpp</code> cover:</p><ul><li>Happy path push/pop</li><li>Emplace and try_pop</li><li>Overflow/underflow exceptions</li><li>Lvalue and rvalue push semantics</li></ul><hr><h2 id="_6-coverage-gcovr-lcov" tabindex="-1"><a class="header-anchor" href="#_6-coverage-gcovr-lcov"><span>6) Coverage (gcovr / lcov)</span></a></h2><ul><li>Turn on instrumentation with the <code>Coverage</code> preset (<code>ENABLE_COVERAGE=ON</code>).</li><li>Run tests to generate <code>.gcda</code> files.</li><li>Use <code>scripts/coverage-report.sh</code> to render HTML (gcovr preferred):</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"># using Coverage preset</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">cmake</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Coverage</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">cmake</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --build</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Coverage</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -j</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">ctest</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Coverage</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --output-on-failure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"># render coverage</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">scripts/coverage-report.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The script:</p><ul><li>Sets <code>--root</code>, applies <code>--filter</code> to include project sources, and <code>--exclude</code> to ignore system/conan/test paths.</li><li>Can be configured to exclude exception-only and unreachable branches to keep the branch metric actionable.</li><li>Outputs HTML to <code>build/Coverage/coverage/index.html</code>.</li></ul><p>Reading the report:</p><ul><li><code>index.html</code> shows totals and a file list.</li><li><code>index.&lt;file&gt;.html</code> provides per-file line/function/branch details and which lines/branches are missing.</li></ul><hr><h2 id="_7-dev-container-vs-code-remote-containers" tabindex="-1"><a class="header-anchor" href="#_7-dev-container-vs-code-remote-containers"><span>7) Dev Container (VS Code Remote Containers)</span></a></h2><ul><li><code>.devcontainer/Dockerfile</code>: Defines the base image and packages (gcc/clang, ninja, ccache, gcovr, etc.).</li><li><code>.devcontainer/devcontainer.json</code>: Configures extensions, mounts, and post-create hooks.</li><li>Benefits: <ul><li>Everyone gets the same toolchain and environment.</li><li>Works the same on Linux/Mac/Windows hosts.</li></ul></li></ul><p>Typical additions:</p><ul><li>Install <code>ninja-build</code> for faster builds.</li><li>Create a Python venv for Conan.</li><li>Post-create scripts to install Conan deps per build type and configure presets.</li></ul><hr><h2 id="_8-vs-code-configuration" tabindex="-1"><a class="header-anchor" href="#_8-vs-code-configuration"><span>8) VS Code configuration</span></a></h2><ul><li><p><code>.vscode/settings.json</code>:</p><ul><li>Prefer <code>clangd</code> as language server; configure <code>compileCommands</code> path.</li><li>CMake Tools: set generator, enable presets integration.</li><li>Format on save, consistent indentation, etc.</li></ul></li><li><p><code>.vscode/tasks.json</code>:</p><ul><li>Example task to run full coverage flow end-to-end.</li><li>Other useful tasks: configure/build/test by preset, clean builds, run clang-tidy (if used).</li></ul></li><li><p><code>.vscode/launch.json</code>:</p><ul><li>Debug configurations: <ul><li>“Debug (pick app + preset)” → prompts for build preset and app binary.</li><li>“Debug (CMake selected target)” → uses CMake Tools’ selected target.</li></ul></li></ul></li><li><p><code>.vscode/extensions.json</code>:</p><ul><li>Recommended extensions: CMake Tools, clangd, EditorConfig, etc.</li></ul></li></ul><hr><h2 id="_9-reusable-scaffolding" tabindex="-1"><a class="header-anchor" href="#_9-reusable-scaffolding"><span>9) Reusable scaffolding</span></a></h2><ul><li><code>scripts/new-module.sh</code>: Quickly create a new module following the pattern: <ul><li><code>include/</code> for public headers</li><li><code>src/</code> for app/library sources</li><li><code>tests/</code> for unit tests</li><li><code>CMakeLists.txt</code> wired with <code>cpp_add_module</code></li></ul></li></ul><p>Usage example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">scripts/new-module.sh</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> apps/NNN_feature/001_widget</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --with-app</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --with-tests</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This script will:</p><ul><li>Create directories and placeholder files.</li><li>Append <code>add_subdirectory(...)</code> to the parent CMakeLists.</li><li>Keep structure consistent across modules.</li></ul><hr><h2 id="_10-example-command-sequences" tabindex="-1"><a class="header-anchor" href="#_10-example-command-sequences"><span>10) Example command sequences</span></a></h2><p>Build and run tests (Debug):</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">conan</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> .</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -s</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> build_type=Debug</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -s</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> compiler.cppstd=</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">23</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --build=missing</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">cmake</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Debug</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">cmake</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --build</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Debug</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -j</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">ctest</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Debug</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --output-on-failure</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Coverage flow:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">conan</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> .</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -s</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> build_type=Debug</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -s</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> compiler.cppstd=</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">23</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --build=missing</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">cmake</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Coverage</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">cmake</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --build</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Coverage</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> -j</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">ctest</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --preset</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;"> Coverage</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> --output-on-failure</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">scripts/coverage-report.sh</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">$BROWSER</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> build/Coverage/coverage/index.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Debugging app/tests from VS Code:</p><ul><li>Choose “C++: Debug (pick app + preset)” and select the app or test and the desired preset.</li><li>Or use “C++: Debug (CMake selected target)” and pick the target from the CMake status bar.</li></ul><hr><h2 id="_11-design-choices-and-tips" tabindex="-1"><a class="header-anchor" href="#_11-design-choices-and-tips"><span>11) Design choices and tips</span></a></h2><ul><li>Per-target C++ standard via <code>target_compile_features(... cxx_std_23)</code> avoids conflicts with Conan’s toolchain and is the modern CMake way.</li><li>Presets keep config reproducible; don’t hard-code paths in scripts—use presets to guarantee consistency.</li><li>Keep tests in module-local <code>tests/</code> so everything lives together; makes modules easy to move/copy.</li><li>Exclude tests and exception-only/unreachable branches from coverage to keep branch coverage meaningful.</li><li>Prefer Ninja for faster incremental builds; it’s supported by CMake Tools out of the box.</li></ul><hr><h2 id="_12-what-to-commit-vs-generate" tabindex="-1"><a class="header-anchor" href="#_12-what-to-commit-vs-generate"><span>12) What to commit vs generate</span></a></h2><ul><li>Commit: CMakeLists, presets, helpers, sources, tests, scripts, docs, VS Code settings.</li><li>Generate (ignored): build directories, Conan caches, coverage HTML, compile_commands symlink at root.</li></ul><hr><h2 id="_13-extending-the-setup" tabindex="-1"><a class="header-anchor" href="#_13-extending-the-setup"><span>13) Extending the setup</span></a></h2><ul><li>Add clang-tidy with a preset and task (configure checks, header-filter, export fixes).</li><li>Introduce sanitizers via <code>ENABLE_*</code> options for Debug presets.</li><li>Add CI workflows that run: conan install → cmake configure (preset) → build → ctest → <a href="http://coverage-report.sh" target="_blank" rel="noopener noreferrer">coverage-report.sh</a> → upload artifact.</li><li>Add more helpers to standardize warnings flags and treat-warnings-as-errors per target.</li></ul><hr><h2 id="_14-troubleshooting" tabindex="-1"><a class="header-anchor" href="#_14-troubleshooting"><span>14) Troubleshooting</span></a></h2><ul><li>“No tests were found!!!”: Ensure <code>enable_testing()</code> runs before adding subdirectories/tests.</li><li>“Experimental/Nightly/Continuous targets clutter”: Don’t include <code>CTest</code>; use <code>BUILD_TESTING</code> + <code>enable_testing()</code>.</li><li>“Generator mismatch (Unix Makefiles vs Ninja)”: Remove old build dirs and align presets and Conan toolchains.</li><li>“Coverage shows unknown/none or too low”: Ensure tests run, verify <code>.gcda</code> files exist, tune <code>gcovr</code> filters, and optionally exclude tests/unreachable/throw branches.</li></ul><hr><p>With this guide, you should be able to recreate the structure, understand each moving part, and confidently extend the project with new modules, tests, and tooling.</p>`,96)])])}const r=s(n,[["render",t]]),c=JSON.parse('{"path":"/external/learn_cpp/docs/architecture.html","title":"learn-cpp: Architecture, Tooling, and Workflow Guide","lang":"en-US","frontmatter":{"description":"learn-cpp: Architecture, Tooling, and Workflow Guide This document is an in-depth, hands-on guide to the project structure, build and test workflow, and the tooling that makes d...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"learn-cpp: Architecture, Tooling, and Workflow Guide\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Damian Drzewicz\\"}]}"],["meta",{"property":"og:url","content":"https://moderndev.eu/external/learn_cpp/docs/architecture.html"}],["meta",{"property":"og:site_name","content":"<ModernDev/>"}],["meta",{"property":"og:title","content":"learn-cpp: Architecture, Tooling, and Workflow Guide"}],["meta",{"property":"og:description","content":"learn-cpp: Architecture, Tooling, and Workflow Guide This document is an in-depth, hands-on guide to the project structure, build and test workflow, and the tooling that makes d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}]]},"git":{},"readingTime":{"minutes":5.16,"words":1549},"filePathRelative":"_external/learn_cpp/docs/architecture.md","excerpt":"\\n<p>This document is an in-depth, hands-on guide to the project structure, build and test workflow, and the tooling that makes day-to-day C++ development smooth and reproducible. It covers:</p>\\n<ul>\\n<li>Repository layout and what each file/folder is for</li>\\n<li>CMake configuration (including presets) and reusable helpers</li>\\n<li>Conan package management and toolchains</li>\\n<li>Testing and coverage (CTest, GoogleTest, gcovr)</li>\\n<li>Development environment (Dev Container, VS Code setup)</li>\\n<li>Practical command examples for local use and CI readiness</li>\\n</ul>","autoDesc":true}');export{r as comp,c as data};
