import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as i,b as e,d as n,e as r,r as l,o as h}from"./app-sj7RCKiZ.js";const d={},c={class:"hint-container note"};function m(p,t){const a=l("VPIcon");return h(),o("div",null,[t[4]||(t[4]=i(`<p>Programming is often described as <em>writing code.</em><br> But that phrase hides something deeper.</p><div class="hint-container note"><p class="hint-container-title"><strong>Programming is the act of translating human intent into machine behavior</strong>.</p></div><p>Let&#39;s strip away the layers of modern tooling and ask the most fundamental question:</p><div class="hint-container tip"><p class="hint-container-title"><strong>What actually happend when we &quot;program&quot;?</strong></p></div><hr><h2 id="üß†-1-the-core-idea-‚Äî-giving-instructions-to-a-machine" tabindex="-1"><a class="header-anchor" href="#üß†-1-the-core-idea-‚Äî-giving-instructions-to-a-machine"><span>üß† 1. The Core Idea ‚Äî Giving Instructions to a Machine</span></a></h2><p>As its essence, a <strong>program</strong> is a sequence of <strong>instructions</strong>.<br> Each instruction tells the computer to perform a small, specific operation:</p><ul><li>move data,</li><li>perform arithmetic,</li><li>jump to another location</li><li>compare values.</li></ul><p>Computers themselvs understand only one thing: <strong>binary instructions</strong> - 0s and 1s.<br> Each bit in these instructions represents an operation, address, or piece of data.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><p>A simple <em>CPU</em> instruction might look like this (in binary):</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>10110000 01100001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To us (humans), that&#39;s meaningless.<br> To the <em>CPU</em>, it might mean:</p><blockquote><p>&quot;Move the number 97 into the register AL.&quot;</p></blockquote><p>That single instruction is a <em>microscopic building block</em> of what we call a <em>prgogram</em>.</p><hr><h2 id="‚öôÔ∏è-2-from-machine-code-to-assembly" tabindex="-1"><a class="header-anchor" href="#‚öôÔ∏è-2-from-machine-code-to-assembly"><span>‚öôÔ∏è 2. From Machine Code to Assembly</span></a></h2><p>Writing binary by hand was the earliest form of programming - literally flipping switches or entering octal codes.<br> It was error-prone and painfully slow.</p><p>To make it more human-friendly, engineers created <strong>assembly language</strong> - symbolic mnemonics for machine instructions.</p><div class="language-asd line-numbers-mode" data-highlighter="shiki" data-ext="asd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-asd"><span class="line"><span>MOV AL, 97</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This is a <strong>1:1 mapping</strong> to machine code - just easier to read.<br> Still, you had to think like the machine: registers, memory addresses, jumps.</p><p>Assembly gave human a way to speak machine, but we were still thinking <strong>at the machine&#39;s level</strong>.</p><h2 id="üß©-3-high-level-languages-‚Äî-abstracting-the-machine" tabindex="-1"><a class="header-anchor" href="#üß©-3-high-level-languages-‚Äî-abstracting-the-machine"><span>üß© 3. High-Level Languages ‚Äî Abstracting the Machine</span></a></h2><p>To solve larger problems, humans needed a way to <strong>think in concepts</strong>, not registers.</p><p>High-level languages (C++, Python, Java) introduced <strong>abstraction</strong> - we can now express <em>what we want</em>, not <em>how to do it</em> in hardware terms.</p><div class="hint-container important"><p class="hint-container-title"><strong>Abstraction</strong></p><p>Express <em><strong>what we want</strong></em>, not <em><strong>how to do it</strong></em>.</p></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This one line might compile into dozens of machine instructions, but the programmer only needs to think: <em>&quot;sum of two numbers.</em></p><p>The compiler does the translation.</p><h2 id="üß∞-4-the-abstraction-ladder" tabindex="-1"><a class="header-anchor" href="#üß∞-4-the-abstraction-ladder"><span>üß∞ 4. The Abstraction Ladder</span></a></h2><p>Let‚Äôs visualize how we moved from raw hardware to modern software:</p><table><thead><tr><th>Level</th><th>Example</th><th>Who Understands It</th><th>Abstraction Type</th></tr></thead><tbody><tr><td>Machine Code</td><td><code>10110000 01100001</code></td><td>CPU</td><td>None</td></tr><tr><td>Assembly</td><td><code>MOV AL, 97</code></td><td>Human + CPU</td><td>Instruction Mnemonics</td></tr><tr><td>C / C++ / Rust</td><td><code>int a = 5;</code></td><td>Human</td><td>Procedural Abstraction</td></tr><tr><td>Python / JavaScript</td><td><code>a = 5</code></td><td>Human</td><td>Dynamic + Memory Abstraction</td></tr><tr><td>Frameworks</td><td><code>User.save()</code></td><td>Human</td><td>Domain Abstraction</td></tr><tr><td>AI / DSLs</td><td><code>model.train(dataset)</code></td><td>Human</td><td>Problem-Domain Abstraction</td></tr></tbody></table><div class="hint-container note"><p class="hint-container-title">At each step:</p><ul><li><strong>Complexity increases</strong></li><li><strong>Control decreases</strong></li><li><strong>Expressiveness and productivity grow</strong></li></ul></div>`,33)),e("div",c,[t[3]||(t[3]=e("p",{class:"hint-container-title"},"Programming is",-1)),e("p",null,[t[0]||(t[0]=e("strong",null,"Climbing the abstraction ladder",-1)),t[1]||(t[1]=n()),r(a,{icon:"arrow-up-right-dots",color:"red"}),t[2]||(t[2]=n(" ‚Äî without forgetting what‚Äôs beneath.",-1))])]),t[5]||(t[5]=i('<h2 id="üßÆ-5-programming-is-not-about-code-‚Äî-it-s-about-models" tabindex="-1"><a class="header-anchor" href="#üßÆ-5-programming-is-not-about-code-‚Äî-it-s-about-models"><span>üßÆ 5. Programming Is Not About Code ‚Äî It‚Äôs About Models</span></a></h2><p>A good programmer doesn‚Äôt just write syntax.<br> They <em><strong>model the world</strong></em> using logic and structures the computer can execute.</p><div class="hint-container info"><p class="hint-container-title">When you define a <strong>variable</strong></p><p>You&#39;re defining a <em>concept</em> - not a piece of RAM.</p></div><div class="hint-container info"><p class="hint-container-title">When you write a <strong>function</strong></p><p>You&#39;re expressing <em>behavior</em>, not CPU jumps.</p></div><div class="hint-container tip"><p class="hint-container-title">Programming is the art of:</p><ol><li>Understanding a problem,</li><li>Designing a model that captures its essence,</li><li>Translating that model into something a computer can run.</li></ol></div><p>That&#39;s why great code often feels like <strong>thought made tangible</strong>.</p><h2 id="üß©-6-why-abstraction-matters" tabindex="-1"><a class="header-anchor" href="#üß©-6-why-abstraction-matters"><span>üß© 6. Why Abstraction Matters</span></a></h2><p>Abstraction hides unnecessary details but keeps essential properties intact.</p><p>Without it:</p><ul><li>We&#39;d still need to handle registers manually.</li><li>Every program would be a hundred thousand lines of low-level instructions.</li><li>Software evolution would be impossible.</li></ul><p>With abstractions:</p><ul><li>We can think in terms of users, systems, networks, or AI models.</li><li>We can build layers of reusable logic (functions, classes, modules).</li><li>We can reason about problems without drowning in details.</li></ul><div class="hint-container info"><p class="hint-container-title">Abstraction</p><p>Lets one developer focus on <em>algorithms</em>, while another builds <em>interfaces</em> - yet both operate in the same universe of code.</p></div><h2 id="üîç-7-from-abstractions-back-to-the-machine" tabindex="-1"><a class="header-anchor" href="#üîç-7-from-abstractions-back-to-the-machine"><span>üîç 7. From Abstractions Back to the Machine</span></a></h2><p>Even thought we write at high levels, everything eventually becomes <strong>machine code</strong>.</p><p>At runtime:</p><ol><li>Your program is translated into <strong>instructions</strong>.</li><li>The CPU executes them in nanoseconds.</li><li>Data flows through memory, registers, caches, buses.</li><li>The illusion of <em>your logic</em> becomes a sequence of electrons moving through silicon.</li></ol><p>Understanding this bottom layer isn&#39;t about nostalgia - it&#39;s about <strong>power</strong>:</p><div class="hint-container info"><p class="hint-container-title">Writing efficient code, diagnosing performance issues, and truly knowing what happens when your code runs.</p></div><h2 id="üí°-8-the-programmer-s-mindset" tabindex="-1"><a class="header-anchor" href="#üí°-8-the-programmer-s-mindset"><span>üí° 8. The Programmer‚Äôs Mindset</span></a></h2><p>Programming is:</p><ul><li>A <strong>translation</strong> of human ideas into mechanical steps,</li><li>A <strong>design process</strong> - shaped by constraints and creativity,</li><li>A <strong>dialogue</strong> between human intent and machine precision.</li></ul><p>It&#39;s not just <em>&quot;writing code&quot;</em> - it&#39;s <strong>building abstractions tha do something real.</strong></p><h2 id="üß≠-9-key-takeaways" tabindex="-1"><a class="header-anchor" href="#üß≠-9-key-takeaways"><span>üß≠ 9. Key Takeaways</span></a></h2><ul><li>Programming began as <strong>machine instruction sequencing.</strong></li><li>Every evolution layer - assembly, C/C++, Python, frameworks - adds <strong>abstraction.</strong></li><li>Abstraction lets us focus on <strong>what</strong> we want, not <strong>how</strong> it happens.</li><li>Yet, the best programmers always understand <strong>both</strong> sides of the stack.</li><li>True mastery = thinking abstractly <strong>while staying grounded in how machines work</strong>.</li></ul>',25))])}const b=s(d,[["render",m]]),k=JSON.parse(`{"path":"/courses/001-back-to-basics/001-fundamentals/001-what-is-programming.html","title":"What is Programming, Really? From Machines to Abstractions","lang":"en-US","frontmatter":{"title":"What is Programming, Really? From Machines to Abstractions","icon":"code","order":1,"index":true,"date":"2025-10-14T00:00:00.000Z","category":["Fundamentals","Back to Basics"],"tag":["Programming","Abstraction","Fundamentals","Machine Code","Computer Science"],"readingTime":7,"description":"Programming is often described as writing code. But that phrase hides something deeper. Programming is the act of translating human intent into machine behavior. Let's strip awa...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What is Programming, Really? From Machines to Abstractions\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-14T20:42:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Damian Drzewicz\\"}]}"],["meta",{"property":"og:url","content":"https://moderndev.eu/courses/001-back-to-basics/001-fundamentals/001-what-is-programming.html"}],["meta",{"property":"og:site_name","content":"<ModernDev/>"}],["meta",{"property":"og:title","content":"What is Programming, Really? From Machines to Abstractions"}],["meta",{"property":"og:description","content":"Programming is often described as writing code. But that phrase hides something deeper. Programming is the act of translating human intent into machine behavior. Let's strip awa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-10-14T20:42:04.000Z"}],["meta",{"property":"article:tag","content":"Computer Science"}],["meta",{"property":"article:tag","content":"Machine Code"}],["meta",{"property":"article:tag","content":"Fundamentals"}],["meta",{"property":"article:tag","content":"Abstraction"}],["meta",{"property":"article:tag","content":"Programming"}],["meta",{"property":"article:published_time","content":"2025-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-14T20:42:04.000Z"}]]},"git":{"createdTime":1760474524000,"updatedTime":1760474524000,"contributors":[{"name":"Damian Drzewicz","username":"","email":"damian.drzewicz@gmail.com","commits":1}]},"readingTime":{"minutes":2.86,"words":859},"filePathRelative":"courses/001-back-to-basics/001-fundamentals/001-what-is-programming.md","excerpt":"<p>Programming is often described as <em>writing code.</em><br>\\nBut that phrase hides something deeper.</p>\\n<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\"><strong>Programming is the act of translating human intent into machine behavior</strong>.</p>\\n</div>\\n<p>Let's strip away the layers of modern tooling and ask the most fundamental question:</p>","autoDesc":true}`);export{b as comp,k as data};
