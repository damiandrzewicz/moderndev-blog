import{_ as s,c as a,f as n,o as i}from"./app-BZis6kw3.js";const l={};function p(t,e){return i(),a("div",null,[...e[0]||(e[0]=[n(`<h1 id="module-pattern" tabindex="-1"><a class="header-anchor" href="#module-pattern"><span>Module pattern</span></a></h1><p>This repo organizes code into small self-contained &quot;modules&quot; under <code>apps/.../&lt;module&gt;/</code>. Each module can define:</p><ul><li>a library (INTERFACE, STATIC, or SHARED)</li><li>an optional console app</li><li>optional unit tests</li></ul><p>We use helper functions from <code>cmake/CppHelpers.cmake</code> to keep module CMake short and consistent.</p><h2 id="directory-layout" tabindex="-1"><a class="header-anchor" href="#directory-layout"><span>Directory layout</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-"><span class="line"><span>apps/</span></span>
<span class="line"><span>  002_moderndev_sources/</span></span>
<span class="line"><span>    001_adt/</span></span>
<span class="line"><span>      include/          # public headers (installed for consumers)</span></span>
<span class="line"><span>      src/              # private sources (for STATIC/SHARED)</span></span>
<span class="line"><span>      tests/            # unit tests</span></span>
<span class="line"><span>      CMakeLists.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="minimal-cmake" tabindex="-1"><a class="header-anchor" href="#minimal-cmake"><span>Minimal CMake</span></a></h2><p>Header-only library + tests; optional app if <code>src/main.cpp</code> exists:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-"><span class="line"><span>cpp_add_module(</span></span>
<span class="line"><span>  NAME AUTO</span></span>
<span class="line"><span>  LIB_TYPE INTERFACE</span></span>
<span class="line"><span>  PUBLIC_INCLUDE &quot;\${CMAKE_CURRENT_SOURCE_DIR}/include&quot;</span></span>
<span class="line"><span>  APP</span></span>
<span class="line"><span>  TESTS</span></span>
<span class="line"><span>  TEST_SOURCES tests/my_test.cpp</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Static library with sources + explicit app sources:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-"><span class="line"><span>cpp_add_module(</span></span>
<span class="line"><span>  NAME my_algo</span></span>
<span class="line"><span>  LIB_TYPE STATIC</span></span>
<span class="line"><span>  LIB_SOURCES src/a.cpp src/b.cpp</span></span>
<span class="line"><span>  PUBLIC_INCLUDE &quot;\${CMAKE_CURRENT_SOURCE_DIR}/include&quot;</span></span>
<span class="line"><span>  PRIVATE_INCLUDE &quot;\${CMAKE_CURRENT_SOURCE_DIR}/src&quot;</span></span>
<span class="line"><span>  APP</span></span>
<span class="line"><span>  APP_SOURCES src/main.cpp</span></span>
<span class="line"><span>  TESTS</span></span>
<span class="line"><span>  TEST_SOURCES tests/a_test.cpp tests/b_test.cpp</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="multiple-libraries-in-a-module" tabindex="-1"><a class="header-anchor" href="#multiple-libraries-in-a-module"><span>Multiple libraries in a module</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-"><span class="line"><span># base lib (header-only)</span></span>
<span class="line"><span>cpp_add_library(BASE_LIB NAME base_lib TYPE INTERFACE PUBLIC_INCLUDE &quot;\${CMAKE_CURRENT_SOURCE_DIR}/include&quot;)</span></span>
<span class="line"><span># impl lib (compiled)</span></span>
<span class="line"><span>cpp_add_library(IMPL_LIB NAME impl_lib TYPE STATIC</span></span>
<span class="line"><span>  SOURCES src/impl.cpp</span></span>
<span class="line"><span>  PUBLIC_INCLUDE &quot;\${CMAKE_CURRENT_SOURCE_DIR}/include&quot;</span></span>
<span class="line"><span>  PRIVATE_INCLUDE &quot;\${CMAKE_CURRENT_SOURCE_DIR}/src&quot;</span></span>
<span class="line"><span>  PRIVATE_DEPS \${BASE_LIB}</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span># tests</span></span>
<span class="line"><span>cpp_add_gtests(NAME impl_tests SOURCES tests/impl_test.cpp DEPS \${IMPL_LIB})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="naming-convention" tabindex="-1"><a class="header-anchor" href="#naming-convention"><span>Naming convention</span></a></h2><ul><li><code>NAME AUTO</code> derives a normalized base from the path and creates targets <code>&lt;name&gt;_lib</code>, <code>&lt;name&gt;_app</code>, <code>&lt;name&gt;_tests</code>.</li><li>Or set <code>NAME</code> explicitly to fix target names.</li></ul><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips"><span>Tips</span></a></h2><ul><li>Use per-target C++ standard via features (helpers default to <code>cxx_std_23</code>).</li><li><code>BUILD_TESTING=ON</code> to enable tests. The root CMake already wires this.</li><li>For new modules, also add <code>add_subdirectory(&lt;module&gt;)</code> in the parent <code>apps/.../CMakeLists.txt</code>.</li></ul><h2 id="creating-a-new-module-quickly" tabindex="-1"><a class="header-anchor" href="#creating-a-new-module-quickly"><span>Creating a new module quickly</span></a></h2><p>Use the script <code>scripts/new-module.sh</code> to scaffold a module with the recommended structure and a starting <code>CMakeLists.txt</code>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code class="language-"><span class="line"><span>./scripts/new-module.sh apps/002_moderndev_sources 002_new_module --type INTERFACE --with-app --with-tests</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Options:</p><ul><li><code>--type INTERFACE|STATIC|SHARED</code></li><li><code>--with-app</code> to include an example <code>src/main.cpp</code></li><li><code>--with-tests</code> to include an example test file</li></ul><p>After generation:</p><ul><li><code>add_subdirectory(002_new_module)</code> to the parent <code>CMakeLists.txt</code>.</li><li>Build with your preferred preset.</li></ul>`,24)])])}const c=s(l,[["render",p]]),r=JSON.parse('{"path":"/external/learn_cpp/docs/modules.html","title":"Module pattern","lang":"en-US","frontmatter":{"description":"Module pattern This repo organizes code into small self-contained \\"modules\\" under apps/.../<module>/. Each module can define: a library (INTERFACE, STATIC, or SHARED) an optiona...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Module pattern\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Damian Drzewicz\\"}]}"],["meta",{"property":"og:url","content":"https://moderndev.eu/external/learn_cpp/docs/modules.html"}],["meta",{"property":"og:site_name","content":"<ModernDev/>"}],["meta",{"property":"og:title","content":"Module pattern"}],["meta",{"property":"og:description","content":"Module pattern This repo organizes code into small self-contained \\"modules\\" under apps/.../<module>/. Each module can define: a library (INTERFACE, STATIC, or SHARED) an optiona..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}]]},"git":{},"readingTime":{"minutes":0.98,"words":293},"filePathRelative":"_external/learn_cpp/docs/modules.md","excerpt":"\\n<p>This repo organizes code into small self-contained \\"modules\\" under <code>apps/.../&lt;module&gt;/</code>. Each module can define:</p>\\n<ul>\\n<li>a library (INTERFACE, STATIC, or SHARED)</li>\\n<li>an optional console app</li>\\n<li>optional unit tests</li>\\n</ul>\\n<p>We use helper functions from <code>cmake/CppHelpers.cmake</code> to keep module CMake short and consistent.</p>","autoDesc":true}');export{c as comp,r as data};
