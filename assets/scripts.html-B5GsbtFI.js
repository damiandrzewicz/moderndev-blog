import{_ as o,c as s,f as i,o as l}from"./app-BZis6kw3.js";const n={};function a(t,e){return l(),s("div",null,[...e[0]||(e[0]=[i('<h2 id="scripts-and-automation" tabindex="-1"><a class="header-anchor" href="#scripts-and-automation"><span>Scripts and automation</span></a></h2><p>This repo centralizes Conan/CMake/CTest logic into small reusable scripts to avoid duplication across local dev, Dev Container hooks, and CI workflows.</p><h3 id="layout" tabindex="-1"><a class="header-anchor" href="#layout"><span>Layout</span></a></h3><ul><li><p><code>scripts/setup-conan-presets.sh</code></p><ul><li>Detects Conan profile and installs dependencies for one or more build types (defaults to Debug and Release).</li><li>Generates Conan-driven CMakePresets (e.g., <code>conan-debug</code>, <code>conan-release</code>).</li></ul></li><li><p><code>scripts/build-type.sh</code></p><ul><li>Configures, builds, and runs tests for a given build type using presets.</li><li>Honors optional <code>EXTRA_CMAKE_FLAGS</code> (e.g., <code>-DENABLE_COVERAGE=ON</code>).</li></ul></li><li><p><code>scripts/ci-build.sh</code></p><ul><li>Thin wrapper for CI. Calls <code>setup-conan-presets.sh</code> for the requested build type, then <code>build-type.sh</code>.</li></ul></li><li><p><code>scripts/ci-coverage.sh</code></p><ul><li>Thin wrapper for CI coverage. Prepares Debug presets, builds with <code>EXTRA_CMAKE_FLAGS=-DENABLE_COVERAGE=ON</code>, runs tests, and calls <code>scripts/coverage-report.sh</code>.</li></ul></li><li><p><code>scripts/coverage-report.sh</code></p><ul><li>Generates HTML coverage via gcovr with tuned filters and exclusions. See inline flags for customization (tests/throw branches, etc.).</li></ul></li></ul><h3 id="dev-container-hooks" tabindex="-1"><a class="header-anchor" href="#dev-container-hooks"><span>Dev Container hooks</span></a></h3><ul><li><p><code>.devcontainer/scripts/post-create.sh</code></p><ul><li>Calls <code>setup-conan-presets.sh Debug Release</code> to prepare presets.</li><li>Builds both Debug and Release via <code>build-type.sh</code>.</li><li>Symlinks <code>compile_commands.json</code> for clangd convenience.</li></ul></li><li><p><code>.devcontainer/scripts/post-start.sh</code></p><ul><li>Maintains ownership of the ccache volume.</li></ul></li></ul><p>There are two Dev Container configurations:</p><ul><li><code>.devcontainer/devcontainer.json</code>: for local development. May include local HOME mounts (gitconfig/ssh) for convenience.</li><li><code>.devcontainer/ci/devcontainer.json</code>: for CI. No HOME mounts; otherwise identical tooling.</li></ul><h3 id="ci-workflows" tabindex="-1"><a class="header-anchor" href="#ci-workflows"><span>CI Workflows</span></a></h3><ul><li><p><code>.github/workflows/ci.yml</code></p><ul><li>Runs inside the CI Dev Container. Uses <code>scripts/ci-build.sh</code> for Debug and Release matrix builds.</li></ul></li><li><p><code>.github/workflows/coverage.yml</code></p><ul><li>Runs inside the CI Dev Container. Uses <code>scripts/ci-coverage.sh</code> and uploads the HTML artifact.</li></ul></li></ul><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><ul><li><p>Local full setup and build (inside Dev Container):</p><ul><li><code>bash scripts/setup-conan-presets.sh</code> # Debug + Release</li><li><code>bash scripts/build-type.sh Debug</code></li><li><code>bash scripts/build-type.sh Release</code></li></ul></li><li><p>Single-type build:</p><ul><li><code>bash scripts/setup-conan-presets.sh Debug</code></li><li><code>bash scripts/build-type.sh Debug</code></li></ul></li><li><p>Coverage run (locally):</p><ul><li><code>EXTRA_CMAKE_FLAGS=-DENABLE_COVERAGE=ON bash scripts/build-type.sh Debug</code></li><li><code>bash scripts/coverage-report.sh</code></li></ul></li></ul><h3 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span>Notes</span></a></h3><ul><li>Presets come from Conanâ€™s CMake integration and <code>cmake_layout</code>. Build directories are typically <code>build/Debug</code> and <code>build/Release</code>.</li><li>To tweak coverage inclusions/exclusions (tests, throw/unreachable), adjust flags in <code>scripts/coverage-report.sh</code> or add environment toggles as needed.</li></ul>',14)])])}const r=o(n,[["render",a]]),d=JSON.parse('{"path":"/external/learn_cpp/docs/scripts.html","title":"","lang":"en-US","frontmatter":{"description":"Scripts and automation This repo centralizes Conan/CMake/CTest logic into small reusable scripts to avoid duplication across local dev, Dev Container hooks, and CI workflows. La...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Damian Drzewicz\\"}]}"],["meta",{"property":"og:url","content":"https://moderndev.eu/external/learn_cpp/docs/scripts.html"}],["meta",{"property":"og:site_name","content":"<ModernDev/>"}],["meta",{"property":"og:description","content":"Scripts and automation This repo centralizes Conan/CMake/CTest logic into small reusable scripts to avoid duplication across local dev, Dev Container hooks, and CI workflows. La..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}]]},"git":{},"readingTime":{"minutes":1.06,"words":319},"filePathRelative":"_external/learn_cpp/docs/scripts.md","excerpt":"<h2>Scripts and automation</h2>\\n<p>This repo centralizes Conan/CMake/CTest logic into small reusable scripts to avoid duplication across local dev, Dev Container hooks, and CI workflows.</p>\\n<h3>Layout</h3>\\n<ul>\\n<li>\\n<p><code>scripts/setup-conan-presets.sh</code></p>\\n<ul>\\n<li>Detects Conan profile and installs dependencies for one or more build types (defaults to Debug and Release).</li>\\n<li>Generates Conan-driven CMakePresets (e.g., <code>conan-debug</code>, <code>conan-release</code>).</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>scripts/build-type.sh</code></p>\\n<ul>\\n<li>Configures, builds, and runs tests for a given build type using presets.</li>\\n<li>Honors optional <code>EXTRA_CMAKE_FLAGS</code> (e.g., <code>-DENABLE_COVERAGE=ON</code>).</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>scripts/ci-build.sh</code></p>\\n<ul>\\n<li>Thin wrapper for CI. Calls <code>setup-conan-presets.sh</code> for the requested build type, then <code>build-type.sh</code>.</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>scripts/ci-coverage.sh</code></p>\\n<ul>\\n<li>Thin wrapper for CI coverage. Prepares Debug presets, builds with <code>EXTRA_CMAKE_FLAGS=-DENABLE_COVERAGE=ON</code>, runs tests, and calls <code>scripts/coverage-report.sh</code>.</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>scripts/coverage-report.sh</code></p>\\n<ul>\\n<li>Generates HTML coverage via gcovr with tuned filters and exclusions. See inline flags for customization (tests/throw branches, etc.).</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
